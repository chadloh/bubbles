<!DOCTYPE html>
<meta charset="utf-8">

<!-- Load d3.js -->
<script src="https://d3js.org/d3.v4.js"></script>

<!-- Load color scale -->
<script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>

<!-- Create a div where the graph will take place -->
<body>
  <div id='tooltip' class="hidden"> </div>
  <div>
    <p><b> Eat, Play, and Learn </b></p>
    <button id="Eat">Eat</button>
    <button id="Play">Play</button>
    <button id="Learn">Learn</button>
  </div>
  <div>
    <p><b> Race </b></p>
    <button id="White">White</button>
    <button id="Black">Black</button>
    <button id="Asian">Asian</button>
    <button id="Other">Other</button>
    <button id="Twoormore">Two or more</button>
    <button id="Native">Native</button>
    <button id="Islander">Islander</button>
    <button id="Reset">Reset</button>

  </div>
  <div id="my_dataviz"></div>
</body>

<!-- A bit of CSS: change stroke color of circle on hover (white -> black) -->
<style>
body {
    margin: 0;
    padding: 0;
    font-family: 'Helvetica Neue', Helvetica, Arial, Sans-serif;
  }
.bubbles {
  stroke-width: 2px;
  stroke: white;
}
.bubbles:hover {
  stroke: black;
}
.text-anchor {
  font-family : Arial;
  font-size: 8px;
}
</style>


<script>

// set the dimensions and margins of the graph
var margin = {top: 10, right: 20, bottom: 30, left: 50},
    width = 960 - margin.left - margin.right,
    height = 720 - margin.top - margin.bottom;

// append the svg object to the body of the page
var svg = d3.select("#my_dataviz")
  .append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform",
          "translate(" + margin.left + "," + margin.top + ")");

var x = d3.scaleLinear()
  .domain([0, 1])
  .range([ 0, width ]);

svg.append("g")
  .attr("transform", "translate(0," + height + ")")
  .call(d3.axisBottom(x));

svg.append("text")
    .attr("transform",
          "translate(" + (width/2) + " ," +
                         (height + margin.top + 20) + ")")
    .style("text-anchor", "middle")
    .text("Social Vulnerability Index");

// Add Y axis
var y = d3.scaleLinear()
  .domain([0, 100])
  .range([ height, 0]);

svg.append("g")
  .call(d3.axisLeft(y));
var allgroups = ["Manhattan", "Bronx", "Brooklyn", "Queens", "Staten Island"]

var myColor = d3.scaleOrdinal()
  .domain(allgroups)
  .range(d3.schemeSet2);

// Add a scale for bubble size
var z = d3.scaleLinear()
  .domain([0, 5000])
  .range([ 4, 40]);
//Read the data
d3.json("https://chadloh.github.io/data/combined_data.geojson", function(data) {
  console.log(data)

  // Add X axis

  // Add a scale for bubble color


  // -1- Create a tooltip div that is hidden by default:
  var tooltip = d3.select("#my_dataviz")
    .append("div")
      .style("opacity", 0)
      .attr("class", "tooltip")
      .style("background-color", "black")
      .style("border-radius", "5px")
      .style("padding", "10px")
      .style("color", "white")

  // -2- Create 3 functions to show / update (when mouse move but stay on same circle) / hide the tooltip
  var showTooltip = function(d) {
    tooltip
      .transition()
      .duration(200)
    tooltip
      .style("opacity", 1)
      .html("Neighborhood Name: " + d.properties.ntaname + "<br> Borough: "+d.properties.boro_name)
      .style("left", (d3.mouse(this)[0]+30) + "px")
      .style("top", (d3.mouse(this)[1]+30) + "px")
  }
  var moveTooltip = function(d) {
    tooltip
      .style("left", (d3.mouse(this)[0]+30) + "px")
      .style("top", (d3.mouse(this)[1]+30) + "px")
  }
  var hideTooltip = function(d) {
    tooltip
      .transition()
      .duration(200)
      .style("opacity", 0)
  }
  svg.append('g')
    .selectAll("dot")
    .data(data.features)
    .enter()
    .append("circle")
    .attr("class", function(d) { return "bubbles " + d.properties.boro_name.replace(" ", "_")})
    .attr("cx", function (d) { return x(d.properties.Total_x); } )
    .attr("cy", function (d) { return y(d.properties.snap_perc); } )
    .attr("r", function (d) { return z(d.properties.Total_y*d.properties.PercU18/100); } )
    .style("fill", function (d) { return myColor(d.properties.boro_name.replaceAll("\\s", "")); } )
    .style("opacity", 0.75)
    // -3- Trigger the functions
    .on("mouseover", showTooltip )
    .on("mousemove", moveTooltip )
    .on("mouseleave", hideTooltip )
  });

  function updateChart(epl){
    d3.selectAll("circle")
      .style("cy", function (d) {
          if(epl == "Eat")        {return y(d.properties.snap_perc);}
          else if(epl == "Play")  {return y(d.properties.budsum);}
          else if(epl == "Learn") {return y(d.properties.PercentageU18WithAccess);}
    })
    .transition()
    .duration(1500);
  }


  function updateRace(race){
    d3.selectAll("circle")
    .style("opacity",function(d){
      if(race=='White'){
        if (d.properties.Perc_white=='nan'){fill_color='lightgray'}
        else {opacity= d.properties.Perc_white/100};
        return opacity;
      }
      else if(race=='Black'){
        if (d.properties.Perc_black_afam=='nan'){fill_color='lightgray'}
        else {opacity= d.properties.Perc_black_afam/99.7};
        return opacity;
      }
      else if(race=='Asian'){
        if (d.properties.Perc_asian=='nan'){fill_color='lightgray'}
        else {opacity= d.properties.Perc_asian/85.2};
        return opacity;
      }
      else if(race=='Islander'){
        if (d.properties.Perc_hawaii_pi=='nan'){fill_color='lightgray'}
        else {opacity= d.properties.Perc_hawaii_pi/6.6};
        return opacity;
      }
      else if(race=='Native'){
        if (d.properties.Perc_amindian_alnative=='nan'){fill_color='lightgray'}
        else {opacity= d.properties.Perc_amindian_alnative/28};
        return opacity;
      }
      else if(race=='Twoormore'){
        if (d.properties.Perc_two_or_more=='nan'){fill_color='lightgray'}
        else {opacity= d.properties.Perc_two_or_more/51.1};
        return opacity;
      }
      else if(race=='Other'){
        if (d.properties.Perc_other_race=='nan'){fill_color='lightgray'}
        else {opacity= d.properties.Perc_other_race/74.5};
        return opacity;
      }
      else if(race=='reset'){
        return 0.75;
      }

    // .transition()
    // .duration(1500);
  })}

// The scale you use for bubble size
var size = d3.scaleSqrt()
  .domain([0, 5000])  // What's in the data, let's say it is percentage
  .range([4, 40])  // Size in pixel

// Add legend: circles
var valuesToShow = [100, 1000, 5000]
var xCircle = 130
var xLabel = 200
var yCircle = 100

var svg2 = d3.select("#my_dataviz")
  .append("svg")
    .attr("width", width)
    .attr("height", height)
svg2.append("text")
  .attr('x', xCircle)
  .attr('y', 14)
  .text("Number of Youth in each census tract")
  .attr('font-size', '12px')
  .attr('text-anchor', 'middle')

svg2.selectAll("legend")
  .data(valuesToShow)
  .enter()
  .append("circle")
    .attr("cx", xCircle)
    .attr("cy", function(d){ return yCircle - size(d) } )
    .attr("r", function(d){ return size(d) })
    .style("fill", "none")
    .attr("stroke", "black")

// Add legend: segments
svg2.selectAll("legend")
  .data(valuesToShow)
  .enter()
  .append("line")
    .attr('x1', function(d){ return xCircle + size(d) } )
    .attr('x2', xLabel)
    .attr('y1', function(d){ return yCircle - size(d) } )
    .attr('y2', function(d){ return yCircle - size(d) } )
    .attr('stroke', 'black')
    .style('stroke-dasharray', ('2,2'))

// Add legend: labels
svg2.selectAll("legend")
  .data(valuesToShow)
  .enter()
  .append("text")
    .attr('x', xLabel)
    .attr('y', function(d){ return yCircle - size(d) } )
    .text( function(d){ return d } )
    .style("font-size", 10)
    .attr('alignment-baseline', 'middle')

    // What to do when one group is hovered
    var highlight = function(d){
      // reduce opacity of all groups
      d3.selectAll(".bubbles").style("opacity", .05)
      // expect the one that is hovered
      d3.selectAll("."+d.replace(" ", "_")).style("opacity", 0.75)
    }

    // And when it is not hovered anymore
    var noHighlight = function(d){
      d3.selectAll(".bubbles").style("opacity", 0.75)
    }
//Add borough colors

// Add one dot in the legend for each name.
var size = 20
svg2.selectAll("myrect")
  .data(allgroups)
  .enter()
  .append("circle")
    .attr("cx", xCircle-50)
    .attr("cy", function(d,i){ return yCircle +50 + i*(size+5)}) // 100 is where the first dot appears. 25 is the distance between dots
    .attr("r", 7)
    .style("fill", function(d){ return myColor(d)})
    .on("mouseover", highlight)
    .on("mouseleave", noHighlight);

// Add labels beside legend dots
svg2.selectAll("mylabels")
  .data(allgroups)
  .enter()
  .append("text")
    .attr("x", xCircle-50 + size*.8)
    .attr("y", function(d,i){ return yCircle+50 + i*(size+5)}) // 100 is where the first dot appears. 25 is the distance between dots
    .style("fill", function(d){ return myColor(d)})
    .text(function(d){ return d})
    .attr("text-anchor", "left")
    .style("alignment-baseline", "middle")
    .on("mouseover", highlight)
    .on("mouseleave", noHighlight);

  // Add dots

  d3.select("#Eat").on("click", function() {
    console.log("Eat")
    updateChart("Eat");
  });
  d3.select("#Play").on("click", function() {
    console.log("Play")
    updateChart("Play");
  });
  d3.select("#Learn").on("click", function() {
    console.log("Learn")
    updateChart("Learn");
  });

  d3.select("#White").on("click", function() {
    updateRace('White');
  });
  d3.select("#Black").on("click", function() {
    updateRace('Black');
  });
  d3.select("#Asian").on("click", function() {
    updateRace('Asian');
  });
  d3.select("#Islander").on("click", function() {
    updateRace('Islander');
  });
  d3.select("#Native").on("click", function(){
    updateRace('Native');
  })
  d3.select("#Twoormore").on("click", function(){
    updateRace('Twoormore');
  })
  d3.select("#Other").on("click", function(){
    updateRace('Other');
  })
  d3.select("#Reset").on("click", function(){
    updateRace('Reset');
  })
</script>
